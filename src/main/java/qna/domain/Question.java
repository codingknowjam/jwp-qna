package qna.domain;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.Lob;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import qna.CannotDeleteException;

/**
 * create table question
 * (
 *     id         bigint generated by default as identity,
 *     contents   clob,
 *     created_at timestamp    not null,
 *     deleted    boolean      not null,
 *     title      varchar(100) not null,
 *     updated_at timestamp,
 *     writer_id  bigint,
 *     primary key (id)
 * )
 */
@Entity
public class Question extends BaseEntity {
	@Lob
	private String contents;

	@Column(nullable = false)
	private boolean deleted;

	@Column(length = 100, nullable = false)
	private String title;

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "writerId")
	private User writer;

	@OneToMany(mappedBy = "question")
	private List<Answer> answers = new ArrayList<>();

	public Question(String title, String contents) {
		this(null, title, contents);
	}

	public Question(Long id, String title, String contents) {
		this.id = id;
		this.title = title;
		this.contents = contents;
	}

	protected Question() {
	}

	public Question writeBy(User writer) {
		this.writer = writer;
		writer.addQuestion(this);
		return this;
	}

	public boolean isOwner(User writer) {
		return this.writer.equals(writer);
	}

	public void addAnswer(Answer answer) {
		this.answers.add(answer);
		answer.toQuestion(this);
	}

	public List<DeleteHistory> delete(User loginUser) throws CannotDeleteException {
		validateQuestionUser(loginUser);
		List<DeleteHistory> deleteHistories = deleteAnswers(loginUser);
		deleteHistories.add(new DeleteHistory(ContentType.QUESTION, id, writer));
		this.deleted = true;
		return deleteHistories;
	}

	private List<DeleteHistory> deleteAnswers(User loginUser) throws CannotDeleteException {
		List<DeleteHistory> deleteHistories = new ArrayList<>();
		for (Answer answer : answers) {
			deleteAnswer(loginUser, answer).ifPresent(deleteHistory -> deleteHistories.add(deleteHistory));
		}
		return deleteHistories;
	}

	private Optional<DeleteHistory> deleteAnswer(User loginUser, Answer answer) throws
		CannotDeleteException {
		if (!answer.isDeleted()) {
			return Optional.of(answer.delete(loginUser));
		}
		return Optional.empty();
	}

	private void validateQuestionUser(User loginUser) throws CannotDeleteException {
		if (!this.isOwner(loginUser)) {
			throw new CannotDeleteException("질문을 삭제할 권한이 없습니다.");
		}
	}

	public boolean isDeleted() {
		return deleted;
	}

	public Long getId() {
		return id;
	}

	public String getContents() {
		return contents;
	}

	public void setContents(String contents) {
		this.contents = contents;
	}

	public User getWriter() {
		return writer;
	}

	public void setDeleted(boolean deleted) {
		this.deleted = deleted;
	}

	@Override
	public String toString() {
		return "Question{" +
			"id=" + id +
			", title='" + title + '\'' +
			", contents='" + contents + '\'' +
			", writerId=" + writer.getId() +
			", deleted=" + deleted +
			'}';
	}

}
